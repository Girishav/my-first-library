{"ast":null,"code":"import _classCallCheck from \"/Users/girish/Desktop/Combined/my-first-library/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/girish/Desktop/Combined/my-first-library/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport 'react';\n\nvar ExampleComponent = /*#__PURE__*/function () {\n  function ExampleComponent() {\n    _classCallCheck(this, ExampleComponent);\n  }\n\n  _createClass(ExampleComponent, [{\n    key: \"getCalendarList\",\n    value: function getCalendarList() {\n      console.log(\"555 SDK get calendar list request\");\n      var calendarURL = \"http://localhost:3003/listCalendar\";\n      fetch(calendarURL, {\n        method: 'POST',\n        headers: null\n      }).then(function (response) {\n        console.log(\"555 SDK get calendar list respons\", response);\n\n        if (response.status != 200) {\n          console.log(\"555 SDK get calendar list invalid statuscode\", response.status);\n        } else {\n          return response.json();\n        }\n      }).then(function (responseJson) {\n        console.log(\"Routing id: \", responseJson);\n      }).catch(function (error) {\n        console.log('Got Error', error);\n      });\n      axios.put(url, utf8Encode(requestdata), config).then(function (response) {\n        logger.Info(Tag, \"Status code : \" + response.status);\n        responseStatus.status = response.status;\n\n        if (responseStatus.status == HttpStatus.SC_OK || responseStatus.status == HttpStatus.SC_CREATED) {\n          success(response.data);\n        }\n      }).catch(function (error) {\n        logger.Info(Tag, \"Got Error \" + error);\n\n        if (error.response) {\n          responseStatus.status = error.response.status;\n          if (error.response.data.error) responseStatus.message = \"Failed to obtain mucid :\" + error.response.data.error.message;else responseStatus.message = \"Failed to obtain mucid \";\n          return failure(responseStatus);\n        } else {\n          logger.Info(Tag, \"Got Error \" + error);\n          return failure(ErrorCodes.ERR_EVENT_MANAGER, error);\n        }\n      });\n    }\n  }]);\n\n  return ExampleComponent;\n}();\n\nvar ExampleComp = new ExampleComponent();\nexport { ExampleComp };","map":{"version":3,"sources":["../src/index.js"],"names":["constructor","getCalendarList","console","calendarURL","fetch","method","headers","response","responseJson","error","axios","utf8Encode","logger","responseStatus","HttpStatus","success","failure","ErrorCodes","ExampleComp"],"mappings":";;;;IAOA,gB;AACEA,8BAAa;AAAA;AAAA;;;;WAGbC,2BAAiB;AACfC,MAAAA,OAAO,CAAPA,GAAAA,CAAAA,mCAAAA;AACA,UAAIC,WAAW,GAAf,oCAAA;AAEAC,MAAAA,KAAK,CAAA,WAAA,EAAc;AACjBC,QAAAA,MAAM,EADW,MAAA;AAEjBC,QAAAA,OAAO,EAAE;AAFQ,OAAd,CAALF,CAAAA,IAAAA,CAGMG,UAAAA,QAAQ,EAAI;AAClBL,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,mCAAAA,EAAAA,QAAAA;;AACE,YAAGK,QAAQ,CAARA,MAAAA,IAAH,GAAA,EAA0B;AACxBL,UAAAA,OAAO,CAAPA,GAAAA,CAAAA,8CAAAA,EAA2DK,QAAQ,CAAnEL,MAAAA;AADF,SAAA,MAEK;AACD,iBAAOK,QAAQ,CAAf,IAAOA,EAAP;AACH;AATHH,OAAAA,EAAAA,IAAAA,CAUMI,UAAAA,YAAY,EAAG;AACrBN,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,cAAAA,EAAAA,YAAAA;AAXAE,OAAAA,EAAAA,KAAAA,CAaQK,UAAAA,KAAD,EAAW;AAClBP,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,WAAAA,EAAAA,KAAAA;AAdAE,OAAAA;AAiBFM,MAAAA,KAAK,CAALA,GAAAA,CAAAA,GAAAA,EACgBC,UAAU,CAD1BD,WAC0B,CAD1BA,EAAAA,MAAAA,EAAAA,IAAAA,CAEaH,UAAAA,QAAD,EAAc;AAClBK,QAAAA,MAAM,CAANA,IAAAA,CAAAA,GAAAA,EAAiB,mBAAmBL,QAAQ,CAA5CK,MAAAA;AACAC,QAAAA,cAAc,CAAdA,MAAAA,GAAwBN,QAAQ,CAAhCM,MAAAA;;AAEA,YACEA,cAAc,CAAdA,MAAAA,IAAyBC,UAAU,CAAnCD,KAAAA,IACAA,cAAc,CAAdA,MAAAA,IAAyBC,UAAU,CAFrC,UAAA,EAGE;AACAC,UAAAA,OAAO,CAACR,QAAQ,CAAhBQ,IAAO,CAAPA;AACD;AAXTL,OAAAA,EAAAA,KAAAA,CAacD,UAAAA,KAAD,EAAW;AAChBG,QAAAA,MAAM,CAANA,IAAAA,CAAAA,GAAAA,EAAiB,eAAjBA,KAAAA;;AACA,YAAIH,KAAK,CAAT,QAAA,EAAoB;AAClBI,UAAAA,cAAc,CAAdA,MAAAA,GAAwBJ,KAAK,CAALA,QAAAA,CAAxBI,MAAAA;AACA,cAAGJ,KAAK,CAALA,QAAAA,CAAAA,IAAAA,CAAH,KAAA,EACAI,cAAc,CAAdA,OAAAA,GACE,6BAA6BJ,KAAK,CAALA,QAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAF/B,OACAI,CADA,KAIAA,cAAc,CAAdA,OAAAA,GAAAA,yBAAAA;AAEA,iBAAOG,OAAO,CAAd,cAAc,CAAd;AARF,SAAA,MASO;AACLJ,UAAAA,MAAM,CAANA,IAAAA,CAAAA,GAAAA,EAAiB,eAAjBA,KAAAA;AACA,iBAAOI,OAAO,CAACC,UAAU,CAAX,iBAAA,EAAd,KAAc,CAAd;AACD;AA3BTP,OAAAA;AA8BC;;;;;;IAGUQ,WAAW,GAAG,IAAA,gBAAA,E","sourcesContent":["import React from 'react'\nimport styles from './styles.module.css'\n\n// export const ExampleComponent = ({ text }) => {\n//   return <div className={styles.test}>Example Component: {text}</div>\n// }\n\nclass ExampleComponent {\n  constructor(){\n  }\n\n  getCalendarList(){\n    console.log(\"555 SDK get calendar list request\")\n    var calendarURL = \"http://localhost:3003/listCalendar\"\n    var requestbody = {\"username\" : \"Rahul\"}\n    fetch(calendarURL, {\n      method: 'POST',\n      headers: null,\n  }).then(response => {\n    console.log(\"555 SDK get calendar list respons\",response)\n      if(response.status != 200){\n        console.log(\"555 SDK get calendar list invalid statuscode\",response.status)\n      }else{\n          return response.json();\n      }\n  }).then(responseJson =>{\n    console.log(\"Routing id: \",responseJson);\n     // responseStatus({status: 'Success'});   \n  }).catch((error) => {\n    console.log('Got Error', error);\n  });\n\n  axios\n        .put(url, utf8Encode(requestdata), config)\n        .then((response) => {\n          logger.Info(Tag, \"Status code : \" + response.status);\n          responseStatus.status = response.status;\n\n          if (\n            responseStatus.status == HttpStatus.SC_OK ||\n            responseStatus.status == HttpStatus.SC_CREATED\n          ) {\n            success(response.data);\n          }\n        })\n        .catch((error) => {\n          logger.Info(Tag, \"Got Error \" + error);\n          if (error.response) {\n            responseStatus.status = error.response.status;\n            if(error.response.data.error)\n            responseStatus.message =\n              \"Failed to obtain mucid :\" + error.response.data.error.message;\n            else\n            responseStatus.message =\n             \"Failed to obtain mucid \";\n            return failure(responseStatus);\n          } else {\n            logger.Info(Tag, \"Got Error \" + error);\n            return failure(ErrorCodes.ERR_EVENT_MANAGER, error);\n          }\n        });\n\n  }\n} \n\nexport const ExampleComp = new ExampleComponent();\n"]},"metadata":{},"sourceType":"module"}